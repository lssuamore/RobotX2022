// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dock_placard.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "dock_placard.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace dock_placard_msgs {
namespace msgs {

namespace {

const ::google::protobuf::Descriptor* DockPlacard_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DockPlacard_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_dock_5fplacard_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_dock_5fplacard_2eproto() {
  protobuf_AddDesc_dock_5fplacard_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "dock_placard.proto");
  GOOGLE_CHECK(file != NULL);
  DockPlacard_descriptor_ = file->message_type(0);
  static const int DockPlacard_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DockPlacard, shape_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DockPlacard, color_),
  };
  DockPlacard_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      DockPlacard_descriptor_,
      DockPlacard::default_instance_,
      DockPlacard_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DockPlacard, _has_bits_[0]),
      -1,
      -1,
      sizeof(DockPlacard),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DockPlacard, _internal_metadata_),
      -1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_dock_5fplacard_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      DockPlacard_descriptor_, &DockPlacard::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_dock_5fplacard_2eproto() {
  delete DockPlacard::default_instance_;
  delete DockPlacard_reflection_;
}

void protobuf_AddDesc_dock_5fplacard_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_dock_5fplacard_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\022dock_placard.proto\022\026dock_placard_msgs."
    "msgs\"+\n\013DockPlacard\022\r\n\005shape\030\001 \002(\t\022\r\n\005co"
    "lor\030\002 \002(\t", 89);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "dock_placard.proto", &protobuf_RegisterTypes);
  DockPlacard::default_instance_ = new DockPlacard();
  DockPlacard::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_dock_5fplacard_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_dock_5fplacard_2eproto {
  StaticDescriptorInitializer_dock_5fplacard_2eproto() {
    protobuf_AddDesc_dock_5fplacard_2eproto();
  }
} static_descriptor_initializer_dock_5fplacard_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DockPlacard::kShapeFieldNumber;
const int DockPlacard::kColorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DockPlacard::DockPlacard()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dock_placard_msgs.msgs.DockPlacard)
}

void DockPlacard::InitAsDefaultInstance() {
}

DockPlacard::DockPlacard(const DockPlacard& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:dock_placard_msgs.msgs.DockPlacard)
}

void DockPlacard::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  shape_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  color_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DockPlacard::~DockPlacard() {
  // @@protoc_insertion_point(destructor:dock_placard_msgs.msgs.DockPlacard)
  SharedDtor();
}

void DockPlacard::SharedDtor() {
  shape_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  color_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void DockPlacard::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DockPlacard::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DockPlacard_descriptor_;
}

const DockPlacard& DockPlacard::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dock_5fplacard_2eproto();
  return *default_instance_;
}

DockPlacard* DockPlacard::default_instance_ = NULL;

DockPlacard* DockPlacard::New(::google::protobuf::Arena* arena) const {
  DockPlacard* n = new DockPlacard;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DockPlacard::Clear() {
// @@protoc_insertion_point(message_clear_start:dock_placard_msgs.msgs.DockPlacard)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_shape()) {
      shape_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_color()) {
      color_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool DockPlacard::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dock_placard_msgs.msgs.DockPlacard)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string shape = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_shape()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->shape().data(), this->shape().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "dock_placard_msgs.msgs.DockPlacard.shape");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_color;
        break;
      }

      // required string color = 2;
      case 2: {
        if (tag == 18) {
         parse_color:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_color()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->color().data(), this->color().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "dock_placard_msgs.msgs.DockPlacard.color");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dock_placard_msgs.msgs.DockPlacard)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dock_placard_msgs.msgs.DockPlacard)
  return false;
#undef DO_
}

void DockPlacard::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dock_placard_msgs.msgs.DockPlacard)
  // required string shape = 1;
  if (has_shape()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->shape().data(), this->shape().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "dock_placard_msgs.msgs.DockPlacard.shape");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->shape(), output);
  }

  // required string color = 2;
  if (has_color()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->color().data(), this->color().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "dock_placard_msgs.msgs.DockPlacard.color");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->color(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:dock_placard_msgs.msgs.DockPlacard)
}

::google::protobuf::uint8* DockPlacard::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:dock_placard_msgs.msgs.DockPlacard)
  // required string shape = 1;
  if (has_shape()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->shape().data(), this->shape().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "dock_placard_msgs.msgs.DockPlacard.shape");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->shape(), target);
  }

  // required string color = 2;
  if (has_color()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->color().data(), this->color().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "dock_placard_msgs.msgs.DockPlacard.color");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->color(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dock_placard_msgs.msgs.DockPlacard)
  return target;
}

int DockPlacard::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:dock_placard_msgs.msgs.DockPlacard)
  int total_size = 0;

  if (has_shape()) {
    // required string shape = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->shape());
  }

  if (has_color()) {
    // required string color = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->color());
  }

  return total_size;
}
int DockPlacard::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:dock_placard_msgs.msgs.DockPlacard)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string shape = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->shape());

    // required string color = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->color());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DockPlacard::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dock_placard_msgs.msgs.DockPlacard)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const DockPlacard* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const DockPlacard>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dock_placard_msgs.msgs.DockPlacard)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dock_placard_msgs.msgs.DockPlacard)
    MergeFrom(*source);
  }
}

void DockPlacard::MergeFrom(const DockPlacard& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dock_placard_msgs.msgs.DockPlacard)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_shape()) {
      set_has_shape();
      shape_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.shape_);
    }
    if (from.has_color()) {
      set_has_color();
      color_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.color_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void DockPlacard::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dock_placard_msgs.msgs.DockPlacard)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DockPlacard::CopyFrom(const DockPlacard& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dock_placard_msgs.msgs.DockPlacard)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DockPlacard::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void DockPlacard::Swap(DockPlacard* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DockPlacard::InternalSwap(DockPlacard* other) {
  shape_.Swap(&other->shape_);
  color_.Swap(&other->color_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DockPlacard::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DockPlacard_descriptor_;
  metadata.reflection = DockPlacard_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DockPlacard

// required string shape = 1;
bool DockPlacard::has_shape() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void DockPlacard::set_has_shape() {
  _has_bits_[0] |= 0x00000001u;
}
void DockPlacard::clear_has_shape() {
  _has_bits_[0] &= ~0x00000001u;
}
void DockPlacard::clear_shape() {
  shape_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_shape();
}
 const ::std::string& DockPlacard::shape() const {
  // @@protoc_insertion_point(field_get:dock_placard_msgs.msgs.DockPlacard.shape)
  return shape_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DockPlacard::set_shape(const ::std::string& value) {
  set_has_shape();
  shape_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dock_placard_msgs.msgs.DockPlacard.shape)
}
 void DockPlacard::set_shape(const char* value) {
  set_has_shape();
  shape_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dock_placard_msgs.msgs.DockPlacard.shape)
}
 void DockPlacard::set_shape(const char* value, size_t size) {
  set_has_shape();
  shape_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dock_placard_msgs.msgs.DockPlacard.shape)
}
 ::std::string* DockPlacard::mutable_shape() {
  set_has_shape();
  // @@protoc_insertion_point(field_mutable:dock_placard_msgs.msgs.DockPlacard.shape)
  return shape_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* DockPlacard::release_shape() {
  // @@protoc_insertion_point(field_release:dock_placard_msgs.msgs.DockPlacard.shape)
  clear_has_shape();
  return shape_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DockPlacard::set_allocated_shape(::std::string* shape) {
  if (shape != NULL) {
    set_has_shape();
  } else {
    clear_has_shape();
  }
  shape_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), shape);
  // @@protoc_insertion_point(field_set_allocated:dock_placard_msgs.msgs.DockPlacard.shape)
}

// required string color = 2;
bool DockPlacard::has_color() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void DockPlacard::set_has_color() {
  _has_bits_[0] |= 0x00000002u;
}
void DockPlacard::clear_has_color() {
  _has_bits_[0] &= ~0x00000002u;
}
void DockPlacard::clear_color() {
  color_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_color();
}
 const ::std::string& DockPlacard::color() const {
  // @@protoc_insertion_point(field_get:dock_placard_msgs.msgs.DockPlacard.color)
  return color_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DockPlacard::set_color(const ::std::string& value) {
  set_has_color();
  color_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dock_placard_msgs.msgs.DockPlacard.color)
}
 void DockPlacard::set_color(const char* value) {
  set_has_color();
  color_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dock_placard_msgs.msgs.DockPlacard.color)
}
 void DockPlacard::set_color(const char* value, size_t size) {
  set_has_color();
  color_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dock_placard_msgs.msgs.DockPlacard.color)
}
 ::std::string* DockPlacard::mutable_color() {
  set_has_color();
  // @@protoc_insertion_point(field_mutable:dock_placard_msgs.msgs.DockPlacard.color)
  return color_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* DockPlacard::release_color() {
  // @@protoc_insertion_point(field_release:dock_placard_msgs.msgs.DockPlacard.color)
  clear_has_color();
  return color_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DockPlacard::set_allocated_color(::std::string* color) {
  if (color != NULL) {
    set_has_color();
  } else {
    clear_has_color();
  }
  color_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), color);
  // @@protoc_insertion_point(field_set_allocated:dock_placard_msgs.msgs.DockPlacard.color)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace msgs
}  // namespace dock_placard_msgs

// @@protoc_insertion_point(global_scope)
