cmake_minimum_required(VERSION 3.0.2)
project(jetson)

## Compile as C++11, supported in ROS Kinetic and newer
# add_compile_options(-std=c++11)

## Find catkin macros and libraries
## if COMPONENTS list like find_package(catkin REQUIRED COMPONENTS xyz)
## is used, also find other catkin packages
find_package(catkin REQUIRED COMPONENTS
	roscpp
	rospy
	cv_bridge
	std_msgs
	nav_msgs
	image_transport
	sensor_msgs
	geometry_msgs
	geographic_msgs
	message_generation
	message_runtime
	message_filters
)

## System dependencies are found with CMake's conventions
# find_package(Boost REQUIRED COMPONENTS system)

find_package(OpenCV REQUIRED)
include_directories(${OpenCV_INCLUDE_DIRS})
include_directories(${catkin_INCLUDE_DIRS})

## Uncomment this if the package has a setup.py. This macro ensures
## modules and global scripts declared therein get installed
## See http://ros.org/doc/api/catkin/html/user_guide/setup_dot_py.html
# catkin_python_setup()

################################################
## Declare ROS messages, services and actions ##
################################################

## To declare and build messages, services or actions from within this
## package, follow these steps:
## * Let MSG_DEP_SET be the set of packages whose message types you use in
##   your messages/services/actions (e.g. std_msgs, actionlib_msgs, ...).
## * In the file package.xml:
##   * add a build_depend tag for "message_generation"
##   * add a build_depend and a exec_depend tag for each package in MSG_DEP_SET
##   * If MSG_DEP_SET isn't empty the following dependency has been pulled in
##     but can be declared for certainty nonetheless:
##     * add a exec_depend tag for "message_runtime"
## * In this file (CMakeLists.txt):
##   * add "message_generation" and every package in MSG_DEP_SET to
##     find_package(catkin REQUIRED COMPONENTS ...)
##   * add "message_runtime" and every package in MSG_DEP_SET to
##     catkin_package(CATKIN_DEPENDS ...)
##   * uncomment the add_*_files sections below as needed
##     and list every .msg/.srv/.action file to be processed
##   * uncomment the generate_messages entry below
##   * add every package in MSG_DEP_SET to generate_messages(DEPENDENCIES ...)

## Generate messages in the 'msg' folder
add_message_files(
  FILES
  NED_waypoints.msg
  NED_poses.msg
  NED_objects.msg
  NED_acoustic.msg
  propulsion_system.msg
  state.msg
  Task.msg
  control_efforts.msg
  zed2i_msg.msg
  NED_objects.msg
  AMS_state.msg
  Acoustics_msg.msg
  Detect_Dock_Fling.msg
  motorStatus_.msg
)

## Generate services in the 'srv' folder
# add_service_files(
#   FILES
#   Service1.srv
#   Service2.srv
# )

## Generate actions in the 'action' folder
# add_action_files(
#   FILES
#   Action1.action
#   Action2.action
# )

## Generate added messages and services with any dependencies listed here
generate_messages(
  DEPENDENCIES
  geometry_msgs
  std_msgs
)

################################################
## Declare ROS dynamic reconfigure parameters ##
################################################

## To declare and build dynamic reconfigure parameters within this
## package, follow these steps:
## * In the file package.xml:
##   * add a build_depend and a exec_depend tag for "dynamic_reconfigure"
## * In this file (CMakeLists.txt):
##   * add "dynamic_reconfigure" to
##     find_package(catkin REQUIRED COMPONENTS ...)
##   * uncomment the "generate_dynamic_reconfigure_options" section below
##     and list every .cfg file to be processed

## Generate dynamic reconfigure parameters in the 'cfg' folder
# generate_dynamic_reconfigure_options(
#   cfg/DynReconf1.cfg
#   cfg/DynReconf2.cfg
# )

###################################
## catkin specific configuration ##
###################################
## The catkin_package macro generates cmake config files for your package
## Declare things to be passed to dependent projects
## INCLUDE_DIRS: uncomment this if your package contains header files
## LIBRARIES: libraries you create in this project that dependent projects also need
## CATKIN_DEPENDS: catkin_packages dependent projects also need
## DEPENDS: system dependencies of this project that dependent projects also need
catkin_package(
#  INCLUDE_DIRS include
#  LIBRARIES jetson
   CATKIN_DEPENDS message_generation message_runtime roscpp std_msgs geometry_msgs
#  DEPENDS system_lib
)

###########
## Build ##
###########

## Specify additional locations of header files
## Your package locations should be listed before other locations
include_directories(
# include
 ${catkin_INCLUDE_DIRS}
)

## Declare a C++ library
# add_library(${PROJECT_NAME}
#   src/${PROJECT_NAME}/jetson.cpp
# )

## Add cmake target dependencies of the library
## as an example, code may need to be generated before libraries
## either from message generation or dynamic reconfigure
# add_dependencies(${PROJECT_NAME} ${${PROJECT_NAME}_EXPORTED_TARGETS} ${catkin_EXPORTED_TARGETS})

# AMORE ADDITION NOTICE: Start of block comment: #[[   End of block comment: ]]
##[[
## Declare a C++ executable
## With catkin_make all packages are built within a single CMake context
## The recommended prefix ensures that target names across packages don't collide
<<<<<<< HEAD
#add_executable(camera_capture src/camera_capture.cpp)
#add_executable(mission_control src/mission_control.cpp)
#add_executable(navigation_array_indoor src/navigation_array_indoor.cpp)
#add_executable(navigation_array_outdoor src/navigation_array_outdoor.cpp)
#add_executable(propulsion_system src/propulsion_system.cpp)
#add_executable(path_planner src/path_planner.cpp)
#add_executable(task5_sub src/task5_sub.cpp)
#add_executable(heartbeat_pub src/heartbeat_pub.cpp)
#add_executable(task3_pub src/task3_pub.cpp)
#add_executable(task3_sub src/task3_sub.cpp)
#add_executable(task1_sub src/task1_sub.cpp)
#add_executable(task4_sub src/task4_sub.cpp)
#add_executable(task2_sub src/task2_sub.cpp)
#add_executable(task6_sub src/task6_sub.cpp)
#add_executable(task7_sub src/task7_sub.cpp)
#add_executable(task8_sub src/task8_sub.cpp)
add_executable(heartbeat src/heartbeat.cpp)
add_executable(heartbeat_control src/heartbeat_control.cpp)
add_executable(QUT_LSSU_cereal_interface src/QUT_LSSU_cereal_interface.cpp)

## Rename C++ executable without prefix
## The above recommended prefix causes long target names, the following renames the
## target back to the shorter version for ease of user use
## e.g. "rosrun someones_pkg node" instead of "rosrun someones_pkg someones_pkg_node"
# set_target_properties(${PROJECT_NAME}_node PROPERTIES OUTPUT_NAME node PREFIX "")

## Add cmake target dependencies of the executable
## same as for the library above

## Specify libraries to link a library or executable target against
#target_link_libraries(camera_capture ${catkin_LIBRARIES} ${OpenCV_LIBS})
#target_link_libraries(mission_control ${catkin_LIBRARIES})
#target_link_libraries(navigation_array_indoor ${catkin_LIBRARIES})
#target_link_libraries(navigation_array_outdoor ${catkin_LIBRARIES})
#target_link_libraries(propulsion_system ${catkin_LIBRARIES})
#target_link_libraries(path_planner ${catkin_LIBRARIES})
#target_link_libraries(task5_sub ${catkin_LIBRARIES})
#target_link_libraries(heartbeat_pub ${catkin_LIBRARIES})
#target_link_libraries(task3_pub ${catkin_LIBRARIES})
#target_link_libraries(task3_sub ${catkin_LIBRARIES})
#target_link_libraries(task1_sub ${catkin_LIBRARIES})
#target_link_libraries(task4_sub ${catkin_LIBRARIES})
#target_link_libraries(task2_sub ${catkin_LIBRARIES})
#target_link_libraries(task6_sub ${catkin_LIBRARIES})
#target_link_libraries(task7_sub ${catkin_LIBRARIES})
#target_link_libraries(task8_sub ${catkin_LIBRARIES})
target_link_libraries(heartbeat ${catkin_LIBRARIES})
target_link_libraries(heartbeat_control ${catkin_LIBRARIES})
target_link_libraries(QUT_LSSU_cereal_interface ${catkin_LIBRARIES})
#]]

#############
## Install ##
#############

# all install targets should use catkin DESTINATION variables
# See http://ros.org/doc/api/catkin/html/adv_user_guide/variables.html

## Mark executable scripts (Python etc.) for installation
## in contrast to setup.py, you can choose the destination
 catkin_install_python(PROGRAMS
   scripts/data_compiler.py
   scripts/efforts_compiler.py
   DESTINATION ${CATKIN_PACKAGE_BIN_DESTINATION}
)

## Mark executables for installation
## See http://docs.ros.org/melodic/api/catkin/html/howto/format1/building_executables.html
# install(TARGETS ${PROJECT_NAME}_node
#   RUNTIME DESTINATION ${CATKIN_PACKAGE_BIN_DESTINATION}
# )

## Mark libraries for installation
## See http://docs.ros.org/melodic/api/catkin/html/howto/format1/building_libraries.html
# install(TARGETS ${PROJECT_NAME}
#   ARCHIVE DESTINATION ${CATKIN_PACKAGE_LIB_DESTINATION}
#   LIBRARY DESTINATION ${CATKIN_PACKAGE_LIB_DESTINATION}
#   RUNTIME DESTINATION ${CATKIN_GLOBAL_BIN_DESTINATION}
# )

## Mark cpp header files for installation
# install(DIRECTORY include/${PROJECT_NAME}/
#   DESTINATION ${CATKIN_PACKAGE_INCLUDE_DESTINATION}
#   FILES_MATCHING PATTERN "*.h"
#   PATTERN ".svn" EXCLUDE
# )

## Mark other files for installation (e.g. launch and bag files, etc.)
install(FILES launch/amore_indoor.launch DESTINATION ${CATKIN_PACKAGE_SHARE_DESTINATION})
install(FILES launch/amore_outdoor.launch DESTINATION ${CATKIN_PACKAGE_SHARE_DESTINATION})
install(FILES launch/indoor_sensors.launch DESTINATION ${CATKIN_PACKAGE_SHARE_DESTINATION})
install(FILES launch/outdoor_sensors.launch DESTINATION ${CATKIN_PACKAGE_SHARE_DESTINATION})
install(FILES launch/ardusimple.launch DESTINATION ${CATKIN_PACKAGE_SHARE_DESTINATION})

# install(FILES
#   # myfile1
#   # myfile2
#   DESTINATION ${CATKIN_PACKAGE_SHARE_DESTINATION}
# )

#############
## Testing ##
#############

## Add gtest based cpp test target and link libraries
# catkin_add_gtest(${PROJECT_NAME}-test test/test_jetson.cpp)
# if(TARGET ${PROJECT_NAME}-test)
#   target_link_libraries(${PROJECT_NAME}-test ${PROJECT_NAME})
# endif()

## Add folders to be run by python nosetests
# catkin_add_nosetests(test)
