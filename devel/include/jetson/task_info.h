// Generated by gencpp from file jetson/task_info.msg
// DO NOT EDIT!


#ifndef JETSON_MESSAGE_TASK_INFO_H
#define JETSON_MESSAGE_TASK_INFO_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Int64.h>

namespace jetson
{
template <class ContainerAllocator>
struct task_info_
{
  typedef task_info_<ContainerAllocator> Type;

  task_info_()
    : name()
    , state()  {
    }
  task_info_(const ContainerAllocator& _alloc)
    : name(_alloc)
    , state(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Int64_<ContainerAllocator>  _name_type;
  _name_type name;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _state_type;
  _state_type state;





  typedef boost::shared_ptr< ::jetson::task_info_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::jetson::task_info_<ContainerAllocator> const> ConstPtr;

}; // struct task_info_

typedef ::jetson::task_info_<std::allocator<void> > task_info;

typedef boost::shared_ptr< ::jetson::task_info > task_infoPtr;
typedef boost::shared_ptr< ::jetson::task_info const> task_infoConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::jetson::task_info_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::jetson::task_info_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::jetson::task_info_<ContainerAllocator1> & lhs, const ::jetson::task_info_<ContainerAllocator2> & rhs)
{
  return lhs.name == rhs.name &&
    lhs.state == rhs.state;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::jetson::task_info_<ContainerAllocator1> & lhs, const ::jetson::task_info_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace jetson

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::jetson::task_info_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::jetson::task_info_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::jetson::task_info_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::jetson::task_info_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::jetson::task_info_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::jetson::task_info_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::jetson::task_info_<ContainerAllocator> >
{
  static const char* value()
  {
    return "8604b4549acbc2637d40681d3885d9ee";
  }

  static const char* value(const ::jetson::task_info_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x8604b4549acbc263ULL;
  static const uint64_t static_value2 = 0x7d40681d3885d9eeULL;
};

template<class ContainerAllocator>
struct DataType< ::jetson::task_info_<ContainerAllocator> >
{
  static const char* value()
  {
    return "jetson/task_info";
  }

  static const char* value(const ::jetson::task_info_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::jetson::task_info_<ContainerAllocator> >
{
  static const char* value()
  {
    return "std_msgs/Int64 name\n"
"string state\n"
"\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Int64\n"
"int64 data\n"
;
  }

  static const char* value(const ::jetson::task_info_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::jetson::task_info_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.name);
      stream.next(m.state);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct task_info_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::jetson::task_info_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::jetson::task_info_<ContainerAllocator>& v)
  {
    s << indent << "name: ";
    s << std::endl;
    Printer< ::std_msgs::Int64_<ContainerAllocator> >::stream(s, indent + "  ", v.name);
    s << indent << "state: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.state);
  }
};

} // namespace message_operations
} // namespace ros

#endif // JETSON_MESSAGE_TASK_INFO_H
