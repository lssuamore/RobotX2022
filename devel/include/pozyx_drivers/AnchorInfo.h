// Generated by gencpp from file pozyx_drivers/AnchorInfo.msg
// DO NOT EDIT!


#ifndef POZYX_DRIVERS_MESSAGE_ANCHORINFO_H
#define POZYX_DRIVERS_MESSAGE_ANCHORINFO_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <geometry_msgs/Point.h>

namespace pozyx_drivers
{
template <class ContainerAllocator>
struct AnchorInfo_
{
  typedef AnchorInfo_<ContainerAllocator> Type;

  AnchorInfo_()
    : header()
    , child_frame_id()
    , id()
    , status(false)
    , position()
    , position_cov()
    , distance(0.0)
    , distance_cov(0.0)
    , RSS(0)  {
      position_cov.assign(0.0);
  }
  AnchorInfo_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , child_frame_id(_alloc)
    , id(_alloc)
    , status(false)
    , position(_alloc)
    , position_cov()
    , distance(0.0)
    , distance_cov(0.0)
    , RSS(0)  {
  (void)_alloc;
      position_cov.assign(0.0);
  }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _child_frame_id_type;
  _child_frame_id_type child_frame_id;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _id_type;
  _id_type id;

   typedef uint8_t _status_type;
  _status_type status;

   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _position_type;
  _position_type position;

   typedef boost::array<double, 9>  _position_cov_type;
  _position_cov_type position_cov;

   typedef double _distance_type;
  _distance_type distance;

   typedef double _distance_cov_type;
  _distance_cov_type distance_cov;

   typedef int16_t _RSS_type;
  _RSS_type RSS;





  typedef boost::shared_ptr< ::pozyx_drivers::AnchorInfo_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::pozyx_drivers::AnchorInfo_<ContainerAllocator> const> ConstPtr;

}; // struct AnchorInfo_

typedef ::pozyx_drivers::AnchorInfo_<std::allocator<void> > AnchorInfo;

typedef boost::shared_ptr< ::pozyx_drivers::AnchorInfo > AnchorInfoPtr;
typedef boost::shared_ptr< ::pozyx_drivers::AnchorInfo const> AnchorInfoConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::pozyx_drivers::AnchorInfo_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::pozyx_drivers::AnchorInfo_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::pozyx_drivers::AnchorInfo_<ContainerAllocator1> & lhs, const ::pozyx_drivers::AnchorInfo_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.child_frame_id == rhs.child_frame_id &&
    lhs.id == rhs.id &&
    lhs.status == rhs.status &&
    lhs.position == rhs.position &&
    lhs.position_cov == rhs.position_cov &&
    lhs.distance == rhs.distance &&
    lhs.distance_cov == rhs.distance_cov &&
    lhs.RSS == rhs.RSS;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::pozyx_drivers::AnchorInfo_<ContainerAllocator1> & lhs, const ::pozyx_drivers::AnchorInfo_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace pozyx_drivers

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::pozyx_drivers::AnchorInfo_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::pozyx_drivers::AnchorInfo_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::pozyx_drivers::AnchorInfo_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::pozyx_drivers::AnchorInfo_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::pozyx_drivers::AnchorInfo_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::pozyx_drivers::AnchorInfo_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::pozyx_drivers::AnchorInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "325b1e2a6e1b43f05d9487e491169f3b";
  }

  static const char* value(const ::pozyx_drivers::AnchorInfo_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x325b1e2a6e1b43f0ULL;
  static const uint64_t static_value2 = 0x5d9487e491169f3bULL;
};

template<class ContainerAllocator>
struct DataType< ::pozyx_drivers::AnchorInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "pozyx_drivers/AnchorInfo";
  }

  static const char* value(const ::pozyx_drivers::AnchorInfo_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::pozyx_drivers::AnchorInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n"
"string child_frame_id\n"
"string id\n"
"bool status\n"
"geometry_msgs/Point position\n"
"float64[9] position_cov\n"
"float64 distance\n"
"float64 distance_cov\n"
"int16 RSS\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::pozyx_drivers::AnchorInfo_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::pozyx_drivers::AnchorInfo_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.child_frame_id);
      stream.next(m.id);
      stream.next(m.status);
      stream.next(m.position);
      stream.next(m.position_cov);
      stream.next(m.distance);
      stream.next(m.distance_cov);
      stream.next(m.RSS);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct AnchorInfo_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::pozyx_drivers::AnchorInfo_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::pozyx_drivers::AnchorInfo_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "child_frame_id: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.child_frame_id);
    s << indent << "id: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.id);
    s << indent << "status: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.status);
    s << indent << "position: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.position);
    s << indent << "position_cov[]" << std::endl;
    for (size_t i = 0; i < v.position_cov.size(); ++i)
    {
      s << indent << "  position_cov[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.position_cov[i]);
    }
    s << indent << "distance: ";
    Printer<double>::stream(s, indent + "  ", v.distance);
    s << indent << "distance_cov: ";
    Printer<double>::stream(s, indent + "  ", v.distance_cov);
    s << indent << "RSS: ";
    Printer<int16_t>::stream(s, indent + "  ", v.RSS);
  }
};

} // namespace message_operations
} // namespace ros

#endif // POZYX_DRIVERS_MESSAGE_ANCHORINFO_H
